### *1. Configuración del proyecto*

Primero, crea un nuevo proyecto de Django:

bash
django-admin startproject seguridad
cd seguridad
python manage.py startapp gestion


Agrega 'gestion' y 'rest_framework' a la lista de INSTALLED_APPS en settings.py:

python
INSTALLED_APPS = [
    # ...
    'rest_framework',
    'gestion',
]


---

### *2. Definición de modelos*

En gestion/models.py, define los modelos principales: Guardia, Cliente, SolicitudServicio, Asignacion.

python
from django.db import models
from django.contrib.auth.models import User

class Guardia(models.Model):
    nombre = models.CharField(max_length=100)
    disponible = models.BooleanField(default=True)

    def __str__(self):
        return self.nombre

class Cliente(models.Model):
    usuario = models.OneToOneField(User, on_delete=models.CASCADE)
    nombre_empresa = models.CharField(max_length=200)

    def __str__(self):
        return self.nombre_empresa

class SolicitudServicio(models.Model):
    cliente = models.ForeignKey(Cliente, on_delete=models.CASCADE)
    fecha_solicitud = models.DateTimeField(auto_now_add=True)
    fecha_servicio = models.DateTimeField()
    duracion_horas = models.IntegerField()
    estado = models.CharField(max_length=50, choices=[('pendiente', 'Pendiente'), ('asignado', 'Asignado'), ('completado', 'Completado')], default='pendiente')

    def __str__(self):
        return f"Solicitud {self.id} - {self.cliente.nombre_empresa}"

class Asignacion(models.Model):
    solicitud = models.ForeignKey(SolicitudServicio, on_delete=models.CASCADE)
    guardia = models.ForeignKey(Guardia, on_delete=models.CASCADE)
    fecha_asignacion = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Guardia {self.guardia.nombre} asignado a {self.solicitud}"


---

### *3. Migraciones de base de datos*

Aplica las migraciones para crear las tablas en la base de datos:

bash
python manage.py makemigrations
python manage.py migrate


---

### *4. Serializadores*

Crea serializadores para convertir los modelos a formatos JSON. En gestion/serializers.py:

python
from rest_framework import serializers
from .models import Guardia, Cliente, SolicitudServicio, Asignacion
from django.contrib.auth.models import User

class GuardiaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Guardia
        fields = '__all__'

class ClienteSerializer(serializers.ModelSerializer):
    class Meta:
        model = Cliente
        fields = '__all__'

class SolicitudServicioSerializer(serializers.ModelSerializer):
    class Meta:
        model = SolicitudServicio
        fields = '__all__'

class AsignacionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Asignacion
        fields = '__all__'

class UserSerializer(serializers.ModelSerializer):
    cliente = ClienteSerializer()

    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'cliente']


---

### *5. Vistas*

En gestion/views.py, crea las vistas para manejar las solicitudes API.

python
from rest_framework import viewsets, status
from rest_framework.response import Response
from .models import Guardia, Cliente, SolicitudServicio, Asignacion
from .serializers import GuardiaSerializer, ClienteSerializer, SolicitudServicioSerializer, AsignacionSerializer
from rest_framework.decorators import action
from django.contrib.auth.models import User

class SolicitudServicioViewSet(viewsets.ModelViewSet):
    queryset = SolicitudServicio.objects.all()
    serializer_class = SolicitudServicioSerializer

    @action(detail=True, methods=['post'])
    def asignar_guardia(self, request, pk=None):
        solicitud = self.get_object()
        if solicitud.estado != 'pendiente':
            return Response({'error': 'La solicitud ya ha sido asignada o completada.'}, status=status.HTTP_400_BAD_REQUEST)

        # Busca un guardia disponible
        guardia = Guardia.objects.filter(disponible=True).first()
        if not guardia:
            return Response({'error': 'No hay guardias disponibles en este momento.'}, status=status.HTTP_400_BAD_REQUEST)

        # Asigna el guardia a la solicitud
        asignacion = Asignacion.objects.create(solicitud=solicitud, guardia=guardia)
        guardia.disponible = False
        guardia.save()
        solicitud.estado = 'asignado'
        solicitud.save()
        return Response({'mensaje': 'Guardia asignado exitosamente.'}, status=status.HTTP_200_OK)

class GuardiaViewSet(viewsets.ModelViewSet):
    queryset = Guardia.objects.all()
    serializer_class = GuardiaSerializer

class ClienteViewSet(viewsets.ModelViewSet):
    queryset = Cliente.objects.all()
    serializer_class = ClienteSerializer

class AsignacionViewSet(viewsets.ModelViewSet):
    queryset = Asignacion.objects.all()
    serializer_class = AsignacionSerializer


---

### *6. Rutas*

En gestion/urls.py, define las rutas para las API.

python
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import GuardiaViewSet, ClienteViewSet, SolicitudServicioViewSet, AsignacionViewSet

router = DefaultRouter()
router.register(r'guardias', GuardiaViewSet)
router.register(r'clientes', ClienteViewSet)
router.register(r'solicitudes', SolicitudServicioViewSet)
router.register(r'asignaciones', AsignacionViewSet)

urlpatterns = [
    path('', include(router.urls)),
]


Y en seguridad/urls.py, incluye las rutas de la aplicación:

python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('gestion.urls')),
]


---

### *7. Autenticación y Permisos*

Para permitir que los clientes puedan solicitar servicios y proteger las API, agrega autenticación. En este ejemplo, utilizaremos tokens.

Instala djangorestframework-simplejwt:

bash
pip install djangorestframework-simplejwt


En settings.py, configura el sistema de autenticación:

python
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}


En urls.py, agrega las rutas para obtener y refrescar tokens:

python
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

urlpatterns += [
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
]


---

### *8. Implementación de la solicitud de servicios por parte del cliente*

Los clientes pueden crear una nueva SolicitudServicio a través de la API autenticada.

Ejemplo de cómo un cliente puede solicitar un servicio (utilizando cURL):

bash
curl -X POST http://localhost:8000/api/solicitudes/ \
  -H 'Authorization: Bearer <TOKEN_DEL_CLIENTE>' \
  -H 'Content-Type: application/json' \
  -d '{
    "cliente": <ID_DEL_CLIENTE>,
    "fecha_servicio": "2023-10-20T10:00:00Z",
    "duracion_horas": 8
}'


---

### *9. Proceso de asignación de guardias*

Un administrador puede asignar un guardia disponible a una solicitud pendiente utilizando el endpoint personalizado asignar_guardia.

Ejemplo:

bash
curl -X POST http://localhost:8000/api/solicitudes/1/asignar_guardia/ \
  -H 'Authorization: Bearer <TOKEN_DEL_ADMIN>' \
  -H 'Content-Type: application/json'


---

### *10. Actualizaciones adicionales*

- *Notificaciones*: Implementa un sistema de notificaciones para informar al cliente cuando un guardia ha sido asignado.
- *Frontend*: Desarrolla una interfaz de usuario para clientes y administradores utilizando React, Vue.js u otro framework.
- *Geolocalización*: Si es necesario, agrega funcionalidades de geolocalización para asignar guardias cercanos al cliente.
- *Calendario y Disponibilidad*: Mejora la lógica para manejar horarios y disponibilidades más complejas.

---

### *Consideraciones de seguridad y buenas prácticas*

- *Validación de datos*: Asegúrate de validar todos los datos entrantes para prevenir inyecciones y errores.
- *Permisos y autenticación*: Implementa permisos para que solo usuarios autorizados puedan acceder o modificar ciertos datos.
- *Registro de actividad*: Mantén un registro de todas las operaciones para auditoría y seguimiento.
- *Escalabilidad*: Si esperas un gran número de usuarios, considera optimizaciones y escalabilidad desde el inicio.